datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  firstName String
  lastName  String
  email     String   @unique
  plan      Plan
  company   String
  users     User[]
  nodes     Node[]
  tags      Tag[]
  color     Color?
}

model Node {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @unique
  answer     Answer?
  tags       Tag[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String

  @@index([questionId])
  @@index([userId])
  @@index([tenantId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  firstName String
  lastName  String
  email     String    @unique
  password  String    @default("TempPassword")
  role      Role      @default(user)
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  tenantId  String
  nodes     Node[]
  accounts  Account[]
  sessions  Session[]

  @@index([tenantId])
}

model Question {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  node      Node?
}

model Answer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  sources   Source[]
  node      Node     @relation(fields: [nodeId], references: [id])
  nodeId    String   @unique

  @@index([nodeId])
}

model Source {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String
  link      String
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String

  @@index([answerId])
}

model Tag {
  id     String @id @default(uuid())
  label  String
  node   Node?   @relation(fields: [nodeId], references: [id])
  nodeId String?
  tenant Tenant   @relation(fields: [tenantId], references: [id])
  tenantId String

  @@index([nodeId])
  @@index([tenantId])
}

model Color {
  id       String @id @default(uuid())
  text     String
  bg       String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @unique

  @@index([tenantId])
}

enum Plan {
  free
  paid
}

enum Role {
  user
  admin
}
