datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  email          String        @unique
  plan           Plan          @default(free)
  company        String
  domain         String?       @unique
  customerId     String?       @unique
  isActive       Boolean       @default(false)
  subscriptionId String?
  users          User[]
  nodes          Node[]
  tags           Tag[]
  integrations   Integrations?
  color          Color?
}

model Integrations {
  id       String @id @default(cuid())
  slack    String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @unique

  @@index([tenantId])
}

model Node {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  question  Question?
  answer    Answer?
  tags      Tag[]
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  tenantId  String

  @@index([tenantId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String?
  email     String     @unique
  image     String?
  role      Role       @default(user)
  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  tenantId  String
  questions Question[]
  answers   Answer[]
  accounts  Account[]
  sessions  Session[]

  @@index([tenantId])
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  slug      String
  node      Node     @relation(fields: [nodeId], references: [id])
  nodeId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([nodeId])
  @@index([userId])
}

model Answer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  node      Node     @relation(fields: [nodeId], references: [id])
  nodeId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([nodeId])
  @@index([userId])
}

model Tag {
  id       String @id @default(cuid())
  label    String
  nodes    Node[]
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  @@index([tenantId])
}

model Color {
  id         String @id @default(cuid())
  foreground String
  background String
  border     String
  tenant     Tenant @relation(fields: [tenantId], references: [id])
  tenantId   String @unique

  @@index([tenantId])
}

enum Plan {
  free
  startup
  enterprise
}

enum Role {
  user
  admin
  tenant
}
